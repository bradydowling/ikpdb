# coding: utf-8

import unittest
import os
import subprocess
import time
import socket
import logging
import json


_logger = logging.getLogger(__file__)
_logger.addHandler(logging.StreamHandler())
_logger.setLevel(logging.INFO)



class IKPdbConnectionError(Exception):
    pass

class IKPdbClientError(Exception):
    pass

class IKPdbClient(object):
    
    MAGIC_CODE = "LLADpcdtbdpac"
    MESSAGE_TEMPLATE = "length=%%s%s%%s" % MAGIC_CODE
    SOCKET_BUFFER_SIZE = 4096  # Maximum size of a packet received from client
    
    def __init__(self, host, port=15470, debug=False):
        """ Create a client and connect to IKPdbClient
        """
        self._host = host
        self._port = port
        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self._socket.connect((self._host, self._port))
        self._received_data = ''
        self._msg_id = 100
    
        if not debug:
            obj = self.receive()
            assert obj['info_messages'][0] == u"Welcome to", "'start'/'Welcome to...' message not received"
    
    def encode(self, obj):
        json_obj = json.dumps(obj)
        return self.MESSAGE_TEMPLATE % (len(json_obj), json_obj,)
    
    def decode(self, message):
        json_obj = message.split(self.MAGIC_CODE)[1]
        obj = json.loads(json_obj)
        return obj

    def log_received(self, msg):
        _logger.debug("Received %s bytes >>>%s<<<", len(msg), msg)

    def log_sent(self, msg):
        _logger.debug("Sent %s bytes >>>%s<<<", len(msg), msg)        
        
    def receive(self):
        """
        """
        
        skip_recv_switch = True if self._received_data else False
        
        while True:
            try:
                if skip_recv_switch:
                    data = ''
                    skip_recv_switch = False 
                else:
                    data = self._socket.recv(self.SOCKET_BUFFER_SIZE)
            except socket.error as socket_err:
                return {'command': '_InternalQuit', 
                        'args':{'socket_error_number': socket_err.errno,
                                'socket_error_str': socket_err.strerror}}
            self._received_data += data
                
            # Do we have received a MAGIC_CODE
            try:
                magic_code_idx = self._received_data.index(self.MAGIC_CODE)
            except ValueError:
                continue
            
            # Do we have we received a length=
            try:
                length_idx = self._received_data.index('length=')
            except ValueError:
                continue
            
            # extract length content from received data
            json_length = int(self._received_data[length_idx + 7:magic_code_idx])
            message_length = magic_code_idx + len(self.MAGIC_CODE) + json_length
            if len(self._received_data) >= message_length:
                full_message = self._received_data[:message_length]
                self._received_data = self._received_data[message_length:]
                break
            else:
                self.SOCKET_BUFFER_SIZE = message_length - len(self._received_data)

        self.log_received(full_message)
        obj = self.decode(full_message)
        return obj

    def send(self, command, **kwargs):
        """ Build a message from parameters and send it to debugger.
        
        :param command: The command sent to the debugger
        :type command: str
        
        :param _id: Unique id of the sent message. It is generated by the client. 
                    but it can be forced.Right now, it's always `None`
                    for messages from debugger to client.
        :type _id: int
        """
        msg = self.encode({
            '_id': self._msg_id,
            'command': command,
            'args': kwargs
        })
        self._msg_id += 1
        if self._socket:
            send_bytes_count = self._socket.sendall(msg)
            self.log_sent(msg)
            return self._msg_id - 1
        raise IKPdbConnectionError("Connection lost!")

    ##### here are high level method #####
    def run_script(self):
        msg_id = self.send('runScript')
        reply_msg = self.receive()
        assert reply_msg['_id'] == msg_id, "Unexpected reply message to runScript command."
        assert reply_msg['commandExecStatus'] == "ok", "IKPdb failed to start debugged program."
        return reply_msg

    def set_breakpoint(self, file_name, line_number, enabled=True, condition=None):
        msg_id = self.send('setBreakpoint',
                           file_name=file_name,
                           line_number=line_number,
                           enabled=enabled,
                           condition=condition)
        reply_msg = self.receive()
        assert reply_msg['_id'] == msg_id, "Unexpected reply to setBreakpoint."
        assert reply_msg['commandExecStatus'] == 'ok', "Failed to setBreakpoint."
        return reply_msg

    def get_breakpoints(self):
        msg_id = self.send('getBreakpoints')
        reply_msg = self.receive()
        assert reply_msg['_id']==msg_id, "Unexpected reply to getBreakpoints."
        assert reply_msg['commandExecStatus']=="ok", "getBreakpoints failed."
        return reply_msg['result']

    def change_breakpoint_state(self, breakpoint_number=None, enabled=None, condition=None):
        if not (breakpoint_number and enabled and condition):
            raise IKPdbClientError("Missing required arguments")
            
        msg_id = self.send('changeBreakpointState',
                           breakpoint_number=breakpoint_number,
                           enabled=enabled,
                           condition=condition)
        reply_msg = self.receive()
        if reply_msg['_id'] != msg_id:
            raise IKPdbClientError("Unexpected reply mssage to 'changeBreakpointState'.")
        if reply_msg['commandExecStatus'] != "ok":
            raise IKPdbClientError("'changeBreakpointState' command failed.")
        return reply_msg


PYTHON_EXEC = "ikpdb/tests/py27tests/bin/python"
TESTED_IKPDB_HOST = '127.0.0.1'
TESTED_IKPDB_PORT = 15999
DEBUGGED_PROGRAM = "ikpdb/tests/debugged_programs/test02_breakpoints.py"

class TestCase02Breakpoints(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        pass    

    @classmethod
    def tearDownClass(cls):
        pass
    
    def setUp(self):
        cmd_line = [
            PYTHON_EXEC, 
            "-m", "ikpdb", 
            "--ikpdb-log=9NB",
            "--ikpdb-port=%s" % TESTED_IKPDB_PORT,
            #"--ikpdb-welcome",
            DEBUGGED_PROGRAM,
            "t02" 
        ]
        self.dp = subprocess.Popen(cmd_line,
                                   stdout=subprocess.PIPE)
        time.sleep(0.2)  # allows debugger to start
        self.ikpdb = IKPdbClient(TESTED_IKPDB_HOST, TESTED_IKPDB_PORT)

    def tearDown(self):
        if self.dp:
            self.dp.kill()

    def test_01_setBreakpoint(self):
        """Launch a debugged program and connect to debugger."""
        
        # set a breakpoint and launch
        msg_id = self.ikpdb.send('setBreakpoint',
                                 file_name='ikpdb/tests/debugged_programs/test02_breakpoints.py',
                                 line_number=5,
                                 enabled=True)
        i_msg = self.ikpdb.receive()
        self.assertEqual(i_msg['_id'], msg_id, "Unexpected reply to setBreakpoint.")
        self.assertEqual(i_msg['commandExecStatus'], 'ok', "Failed to setBreakpoint.")

        reply_msg = self.ikpdb.run_script()

        # Wait for breakpoint
        # Note that when debugging this file you must run straight from runScript to next receive()
        i_msg = self.ikpdb.receive()
        self.assertEqual(i_msg['command'], "programBreak", "programBreak message not received.")
        self.assertEqual(i_msg['exception'], None, "Unexpected exception raised.")
        top_frame = i_msg['frames'][0]
        self.assertEqual(top_frame['file_path'], 
                         'ikpdb/tests/debugged_programs/test02_breakpoints.py', 
                         "programBreak on unexpected file.")
        self.assertEqual(top_frame['line_number'], 5, "programBreak on unexpected line number.")


    def test_02_getBreakpoints(self):
        """Launch debugger, run program and wait termination"""

        self.ikpdb.set_breakpoint('ikpdb/tests/debugged_programs/test02_breakpoints.py',
                                 line_number=5)

        msg_id = self.ikpdb.send('getBreakpoints')
        i_msg = self.ikpdb.receive()
        self.assertEqual(i_msg['_id'], msg_id, "Unexpected reply to getBreakpoints.")
        self.assertEqual(i_msg['commandExecStatus'], "ok", "getBreakpoints failed.")
        self.assertEqual(len(i_msg['result']), 1, "Wrong number of breakpoints returned.")
        self.assertEqual(i_msg['result'][0]['line_number'], 5, "Wrong breakpoint returned.")

    def test_03_changeBreakpointState(self):
        """Test disable a breakpoint and set a condition"""
        self.ikpdb.set_breakpoint('ikpdb/tests/debugged_programs/test02_breakpoints.py',
                                 line_number=5)

        msg_id = self.ikpdb.send('changeBreakpointState',
                                 breakpoint_number=0,
                                 enabled=False,
                                 condition='')
        i_msg = self.ikpdb.receive()
        self.assertEqual(i_msg['_id'], msg_id, "Unexpected reply to 'changeBreakpointState' enabled.")
        self.assertEqual(i_msg['commandExecStatus'], "ok", "'changeBreakpointState' command failed.")

        bp_list = self.ikpdb.get_breakpoints()
        self.assertEqual(len(bp_list), 1, "Wrong number of breakpoints returned.")
        self.assertEqual(bp_list[0]['line_number'], 5, "Wrong breakpoint returned.")
        self.assertFalse(bp_list[0]['enabled'], "'changeBreakpointState' failed.")

        msg_id = self.ikpdb.send('changeBreakpointState',
                                 breakpoint_number=0,
                                 enabled=True,
                                 condition='a_var==1')
        i_msg = self.ikpdb.receive()
        self.assertEqual(i_msg['_id'], msg_id, "Unexpected reply to 'changeBreakpointState' condition.")
        self.assertEqual(i_msg['commandExecStatus'], "ok", "'changeBreakpointState' command failed.")

        bp_list = self.ikpdb.get_breakpoints()
        self.assertEqual(len(bp_list), 1, "Wrong number of breakpoints returned.")
        self.assertEqual(bp_list[0]['line_number'], 5, "Wrong breakpoint returned.")
        self.assertEqual(bp_list[0]['condition'], 'a_var==1', "'changeBreakpointState' failed to set condition.")


    def test_03_conditionalBreakpoint(self):
        """Test conditional breakpoint and enabled are managed."""
        self.ikpdb.set_breakpoint('ikpdb/tests/debugged_programs/test02_breakpoints.py',
                                 line_number=5,
                                 enabled=False)
        self.ikpdb.set_breakpoint('ikpdb/tests/debugged_programs/test02_breakpoints.py',
                                 line_number=6,
                                 condition='a_var==50',
                                 enabled=False)
        self.ikpdb.set_breakpoint('ikpdb/tests/debugged_programs/test02_breakpoints.py',
                                 line_number=7,
                                 condition='a_var==50',
                                 enabled=True)

        self.ikpdb.run_script()
        
        i_msg = self.ikpdb.receive()
        self.assertEqual(i_msg['command'], "programBreak", "programBreak message not received.")
        self.assertEqual(i_msg['exception'], None, "Unexpected exception raised.")
        top_frame = i_msg['frames'][0]
        self.assertEqual(top_frame['file_path'], 
                         'ikpdb/tests/debugged_programs/test02_breakpoints.py', 
                         "programBreak on unexpected file.")
        self.assertEqual(top_frame['line_number'], 7, "programBreak on unexpected line number.")
        a_var_dump = filter(lambda e:e['name']=='a_var', top_frame['f_locals'])
                
        self.assertEqual(len(a_var_dump), 1, "local a_var not found.")
        self.assertEqual(a_var_dump[0]['value'], '50', "wrong value for a_var. expecting '50' git '%s'" % a_var_dump[0]['value'])
        
        
        


